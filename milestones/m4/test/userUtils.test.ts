// Test suite for the formatUser function
// This test suite checks the functionality of the formatUser function, including email masking and handling of
// various user data formats. Generated by ChatGPT.
import { formatUser, User } from './userUtils';

describe('formatUser', () => {
  const user1: User = {
    firstName: 'Jane',
    lastName: 'Doe',
    email: 'jane.doe@example.com',
  };

  const user2: User = {
    firstName: '李',
    lastName: '小龙',
    email: 'bruce.lee@example.cn',
  };

  it('formats standard user correctly without masking', () => {
    expect(formatUser(user1)).toBe('Jane Doe <jane.doe@example.com>');
  });

  it('formats Chinese characters correctly without masking', () => {
    expect(formatUser(user2)).toBe('李 小龙 <bruce.lee@example.cn>');
  });

  it('masks email for standard user', () => {
    expect(formatUser(user1, true)).toBe('Jane Doe <j***@example.com>');
  });

  it('masks email correctly for short usernames', () => {
    const shortEmailUser: User = {
      firstName: 'Ed',
      lastName: 'Yu',
      email: 'ey@example.com',
    };
    expect(formatUser(shortEmailUser, true)).toBe('Ed Yu <e***@example.com>');
  });

  it('handles empty email field gracefully', () => {
    const noEmailUser: User = {
      firstName: 'Alex',
      lastName: 'Nguyen',
      email: '',
    };
    expect(formatUser(noEmailUser, true)).toBe('Alex Nguyen <>');
  });

  it('handles undefined email field gracefully', () => {
    const undefinedEmailUser = {
      firstName: 'Chris',
      lastName: 'Lam',
    } as unknown as User;

    expect(formatUser(undefinedEmailUser, true)).toBe('Chris Lam <>');
  });

  it('returns correct formatting with no mask flag explicitly passed', () => {
    expect(formatUser(user1, false)).toBe('Jane Doe <jane.doe@example.com>');
  });
});