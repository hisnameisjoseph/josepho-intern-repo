import type { CSpellSettings } from '@cspell/cspell-types';
export declare const defaultConfig: CommentConfig;
export interface ConfigEntry<T, K extends keyof T> {
    key?: K;
    value: T[K];
    comment?: string;
}
export interface ApplyToConfigEntry<T, K extends keyof T> extends ConfigEntry<T, K> {
    update?: (prev: T[K], next: T[K]) => T[K];
}
export type CommentConfig = {
    [K in keyof CSpellSettings]?: ConfigEntry<CSpellSettings, K>;
};
export type ApplyToConfig<T = CSpellSettings> = {
    [K in keyof T]?: ApplyToConfigEntry<T, K>;
};
//# sourceMappingURL=constants.d.ts.map